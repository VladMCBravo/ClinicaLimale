{"ast":null,"code":"import _objectSpread from\"/Users/macmini/Documents/Sistema_Consultorio/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/components/financeiro/PagarAgendamentoTab.jsx\nimport React,{useState,useEffect}from'react';import{Box,Autocomplete,TextField,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Typography,Button,CircularProgress}from'@mui/material';import{pacienteService}from'../../services/pacienteService';import{faturamentoService}from'../../services/faturamentoService';import{useSnackbar}from'../../contexts/SnackbarContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function PagarAgendamentoTab(_ref){let{onClose}=_ref;const[pacientes,setPacientes]=useState([]);const[pacienteSelecionado,setPacienteSelecionado]=useState(null);const[cobrancas,setCobrancas]=useState([]);const[isLoadingCobrancas,setIsLoadingCobrancas]=useState(false);const{showSnackbar}=useSnackbar();// Efeito para buscar a lista de todos os pacientes para o Autocomplete\nuseEffect(()=>{pacienteService.getPacientes().then(response=>setPacientes(response.data)).catch(()=>showSnackbar('Erro ao carregar lista de pacientes.','error'));},[showSnackbar]);// Efeito para buscar as cobranças do paciente selecionado\nuseEffect(()=>{if(pacienteSelecionado){setIsLoadingCobrancas(true);faturamentoService.getCobrancasPendentes(pacienteSelecionado.id).then(response=>setCobrancas(response.data)).catch(()=>showSnackbar('Erro ao buscar cobranças do paciente.','error')).finally(()=>setIsLoadingCobrancas(false));}else{setCobrancas([]);// Limpa a lista se nenhum paciente for selecionado\n}},[pacienteSelecionado,showSnackbar]);const handleRegistrarPagamento=async pagamentoId=>{try{// Por enquanto, vamos marcar como 'Pago' e 'Dinheiro'.\n// No futuro, podemos abrir outro modal para perguntar a forma de pagamento.\nawait faturamentoService.updatePagamento(pagamentoId,{status:'Pago',forma_pagamento:'Dinheiro'});showSnackbar('Pagamento registrado com sucesso!','success');// Atualiza a lista de cobranças para remover a que foi paga\nsetCobrancas(prev=>prev.filter(c=>c.id!==pagamentoId));}catch(error){showSnackbar('Erro ao registrar pagamento.','error');}};return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{mb:2},children:\"Busque por um paciente para ver seus agendamentos com pagamento pendente.\"}),/*#__PURE__*/_jsx(Autocomplete,{options:pacientes,getOptionLabel:option=>option.nome_completo,value:pacienteSelecionado,onChange:(event,newValue)=>setPacienteSelecionado(newValue),renderInput:params=>/*#__PURE__*/_jsx(TextField,_objectSpread(_objectSpread({},params),{},{label:\"Buscar Paciente\"})),sx:{mb:3}}),isLoadingCobrancas?/*#__PURE__*/_jsx(CircularProgress,{}):/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Data\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Tipo\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Valor (R$)\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"A\\xE7\\xE3o\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:cobrancas.length>0?cobrancas.map(cobranca=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:new Date(cobranca.data_agendamento).toLocaleDateString('pt-BR')}),/*#__PURE__*/_jsx(TableCell,{children:cobranca.tipo_agendamento}),/*#__PURE__*/_jsx(TableCell,{children:cobranca.valor}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"small\",onClick:()=>handleRegistrarPagamento(cobranca.id),children:\"Registrar Pagamento\"})})]},cobranca.id)):/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:4,align:\"center\",children:pacienteSelecionado?\"Nenhuma cobrança pendente.\":\"Selecione um paciente para começar.\"})})})]})})]});}","map":{"version":3,"names":["React","useState","useEffect","Box","Autocomplete","TextField","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Button","CircularProgress","pacienteService","faturamentoService","useSnackbar","jsx","_jsx","jsxs","_jsxs","PagarAgendamentoTab","_ref","onClose","pacientes","setPacientes","pacienteSelecionado","setPacienteSelecionado","cobrancas","setCobrancas","isLoadingCobrancas","setIsLoadingCobrancas","showSnackbar","getPacientes","then","response","data","catch","getCobrancasPendentes","id","finally","handleRegistrarPagamento","pagamentoId","updatePagamento","status","forma_pagamento","prev","filter","c","error","children","variant","sx","mb","options","getOptionLabel","option","nome_completo","value","onChange","event","newValue","renderInput","params","_objectSpread","label","size","align","length","map","cobranca","Date","data_agendamento","toLocaleDateString","tipo_agendamento","valor","onClick","colSpan"],"sources":["/Users/macmini/Documents/Sistema_Consultorio/frontend/src/components/financeiro/PagarAgendamentoTab.jsx"],"sourcesContent":["// src/components/financeiro/PagarAgendamentoTab.jsx\nimport React, { useState, useEffect } from 'react';\nimport {\n    Box, Autocomplete, TextField, Table, TableBody, TableCell,\n    TableContainer, TableHead, TableRow, Typography, Button, CircularProgress\n} from '@mui/material';\nimport { pacienteService } from '../../services/pacienteService';\nimport { faturamentoService } from '../../services/faturamentoService';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\n\nexport default function PagarAgendamentoTab({ onClose }) {\n    const [pacientes, setPacientes] = useState([]);\n    const [pacienteSelecionado, setPacienteSelecionado] = useState(null);\n    const [cobrancas, setCobrancas] = useState([]);\n    const [isLoadingCobrancas, setIsLoadingCobrancas] = useState(false);\n    const { showSnackbar } = useSnackbar();\n\n    // Efeito para buscar a lista de todos os pacientes para o Autocomplete\n    useEffect(() => {\n        pacienteService.getPacientes()\n            .then(response => setPacientes(response.data))\n            .catch(() => showSnackbar('Erro ao carregar lista de pacientes.', 'error'));\n    }, [showSnackbar]);\n\n    // Efeito para buscar as cobranças do paciente selecionado\n    useEffect(() => {\n        if (pacienteSelecionado) {\n            setIsLoadingCobrancas(true);\n            faturamentoService.getCobrancasPendentes(pacienteSelecionado.id)\n                .then(response => setCobrancas(response.data))\n                .catch(() => showSnackbar('Erro ao buscar cobranças do paciente.', 'error'))\n                .finally(() => setIsLoadingCobrancas(false));\n        } else {\n            setCobrancas([]); // Limpa a lista se nenhum paciente for selecionado\n        }\n    }, [pacienteSelecionado, showSnackbar]);\n\n    const handleRegistrarPagamento = async (pagamentoId) => {\n        try {\n            // Por enquanto, vamos marcar como 'Pago' e 'Dinheiro'.\n            // No futuro, podemos abrir outro modal para perguntar a forma de pagamento.\n            await faturamentoService.updatePagamento(pagamentoId, {\n                status: 'Pago',\n                forma_pagamento: 'Dinheiro' \n            });\n            showSnackbar('Pagamento registrado com sucesso!', 'success');\n            // Atualiza a lista de cobranças para remover a que foi paga\n            setCobrancas(prev => prev.filter(c => c.id !== pagamentoId));\n        } catch (error) {\n            showSnackbar('Erro ao registrar pagamento.', 'error');\n        }\n    };\n\n    return (\n        <Box>\n            <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                Busque por um paciente para ver seus agendamentos com pagamento pendente.\n            </Typography>\n            <Autocomplete\n                options={pacientes}\n                getOptionLabel={(option) => option.nome_completo}\n                value={pacienteSelecionado}\n                onChange={(event, newValue) => setPacienteSelecionado(newValue)}\n                renderInput={(params) => <TextField {...params} label=\"Buscar Paciente\" />}\n                sx={{ mb: 3 }}\n            />\n\n            {isLoadingCobrancas ? <CircularProgress /> : (\n                <TableContainer>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Data</TableCell>\n                                <TableCell>Tipo</TableCell>\n                                <TableCell>Valor (R$)</TableCell>\n                                <TableCell align=\"right\">Ação</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {cobrancas.length > 0 ? cobrancas.map(cobranca => (\n                                <TableRow key={cobranca.id}>\n                                    <TableCell>{new Date(cobranca.data_agendamento).toLocaleDateString('pt-BR')}</TableCell>\n                                    <TableCell>{cobranca.tipo_agendamento}</TableCell>\n                                    <TableCell>{cobranca.valor}</TableCell>\n                                    <TableCell align=\"right\">\n                                        <Button \n                                            variant=\"contained\" \n                                            size=\"small\"\n                                            onClick={() => handleRegistrarPagamento(cobranca.id)}\n                                        >\n                                            Registrar Pagamento\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            )) : (\n                                <TableRow>\n                                    <TableCell colSpan={4} align=\"center\">\n                                        {pacienteSelecionado ? \"Nenhuma cobrança pendente.\" : \"Selecione um paciente para começar.\"}\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            )}\n        </Box>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}