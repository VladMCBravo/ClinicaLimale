{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\nimport { usePickerAdapter } from \"../../../hooks/usePickerAdapter.js\";\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = _ref => {\n  let {\n    stateResponse: {\n      // States and derived states\n      localizedDigits,\n      sectionsValueBoundaries,\n      state,\n      timezone,\n      // Methods to update the states\n      setCharacterQuery,\n      setTempAndroidValueStr,\n      updateSectionValue\n    }\n  } = _ref;\n  const adapter = usePickerAdapter();\n  const applyQuery = (_ref2, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    let {\n      keyPressed,\n      sectionIndex\n    } = _ref2;\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = \"\".concat(state.characterQuery.value).concat(cleanKeyPressed);\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(adapter, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(adapter, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(adapter, fallbackValue, adapter.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = _ref3 => {\n      let {\n        queryValue,\n        skipIfBelowMinimum,\n        section\n      } = _ref3;\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(adapter, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(adapter, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(adapter, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(adapter, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  return useEventCallback(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */","map":{"version":3,"names":["_extends","useEventCallback","changeSectionValueFormat","cleanDigitSectionValue","doesSectionFormatHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","applyLocalizedDigits","removeLocalizedDigits","isStringNumber","usePickerAdapter","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","_ref","stateResponse","localizedDigits","sectionsValueBoundaries","state","timezone","setCharacterQuery","setTempAndroidValueStr","updateSectionValue","adapter","applyQuery","_ref2","getFirstSectionValueMatchingWithQuery","isValidQueryValue","keyPressed","sectionIndex","cleanKeyPressed","toLowerCase","activeSection","sections","characterQuery","value","concatenatedQueryValue","concat","queryResponse","sectionType","type","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","_ref3","skipIfBelowMinimum","section","cleanQueryValue","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","hasLeadingZerosInFormat","hasLeadingZerosInInput","maxLength","formattedValue","isNumericEditing"],"sources":["/Users/macmini/Documents/Sistema_Consultorio/frontend/node_modules/@mui/x-date-pickers/esm/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\nimport { usePickerAdapter } from \"../../../hooks/usePickerAdapter.js\";\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  stateResponse: {\n    // States and derived states\n    localizedDigits,\n    sectionsValueBoundaries,\n    state,\n    timezone,\n    // Methods to update the states\n    setCharacterQuery,\n    setTempAndroidValueStr,\n    updateSectionValue\n  }\n}) => {\n  const adapter = usePickerAdapter();\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${state.characterQuery.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(adapter, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(adapter, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(adapter, fallbackValue, adapter.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = ({\n      queryValue,\n      skipIfBelowMinimum,\n      section\n    }) => {\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(adapter, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(adapter, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(adapter, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(adapter, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  return useEventCallback(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}