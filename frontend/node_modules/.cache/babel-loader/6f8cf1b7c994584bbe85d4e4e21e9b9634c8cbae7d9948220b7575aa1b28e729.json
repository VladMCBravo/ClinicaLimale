{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { usePickerAdapter } from \"./usePickerAdapter.js\";\nimport { buildSectionsFromFormat } from \"../internals/hooks/useField/buildSectionsFromFormat.js\";\nimport { getLocalizedDigits } from \"../internals/hooks/useField/useField.utils.js\";\nimport { usePickerTranslations } from \"./usePickerTranslations.js\";\nimport { useNullablePickerContext } from \"../internals/hooks/useNullablePickerContext.js\";\n/**\n * Returns the parsed format to be rendered in the field when there is no value or in other parts of the Picker.\n * This format is localized (for example `AAAA` for the year with the French locale) and cannot be parsed by your date library.\n * @param {object} The parameters needed to build the placeholder.\n * @param {string} params.format Format to parse.\n * @returns\n */\nexport const useParsedFormat = function () {\n  var _pickerContext$fieldF;\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const pickerContext = useNullablePickerContext();\n  const adapter = usePickerAdapter();\n  const isRtl = useRtl();\n  const translations = usePickerTranslations();\n  const localizedDigits = React.useMemo(() => getLocalizedDigits(adapter), [adapter]);\n  const {\n    format = (_pickerContext$fieldF = pickerContext === null || pickerContext === void 0 ? void 0 : pickerContext.fieldFormat) !== null && _pickerContext$fieldF !== void 0 ? _pickerContext$fieldF : adapter.formats.fullDate\n  } = parameters;\n  return React.useMemo(() => {\n    const sections = buildSectionsFromFormat({\n      adapter,\n      format,\n      formatDensity: 'dense',\n      isRtl,\n      shouldRespectLeadingZeros: true,\n      localeText: translations,\n      localizedDigits,\n      date: null,\n      // TODO v9: Make sure we still don't reverse in `buildSectionsFromFormat` when using `useParsedFormat`.\n      enableAccessibleFieldDOMStructure: false\n    });\n    return sections.map(section => \"\".concat(section.startSeparator).concat(section.placeholder).concat(section.endSeparator)).join('');\n  }, [adapter, isRtl, translations, localizedDigits, format]);\n};","map":{"version":3,"names":["React","useRtl","usePickerAdapter","buildSectionsFromFormat","getLocalizedDigits","usePickerTranslations","useNullablePickerContext","useParsedFormat","_pickerContext$fieldF","parameters","arguments","length","undefined","pickerContext","adapter","isRtl","translations","localizedDigits","useMemo","format","fieldFormat","formats","fullDate","sections","formatDensity","shouldRespectLeadingZeros","localeText","date","enableAccessibleFieldDOMStructure","map","section","concat","startSeparator","placeholder","endSeparator","join"],"sources":["/Users/macmini/Documents/Sistema_Consultorio/frontend/node_modules/@mui/x-date-pickers/esm/hooks/useParsedFormat.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { usePickerAdapter } from \"./usePickerAdapter.js\";\nimport { buildSectionsFromFormat } from \"../internals/hooks/useField/buildSectionsFromFormat.js\";\nimport { getLocalizedDigits } from \"../internals/hooks/useField/useField.utils.js\";\nimport { usePickerTranslations } from \"./usePickerTranslations.js\";\nimport { useNullablePickerContext } from \"../internals/hooks/useNullablePickerContext.js\";\n/**\n * Returns the parsed format to be rendered in the field when there is no value or in other parts of the Picker.\n * This format is localized (for example `AAAA` for the year with the French locale) and cannot be parsed by your date library.\n * @param {object} The parameters needed to build the placeholder.\n * @param {string} params.format Format to parse.\n * @returns\n */\nexport const useParsedFormat = (parameters = {}) => {\n  const pickerContext = useNullablePickerContext();\n  const adapter = usePickerAdapter();\n  const isRtl = useRtl();\n  const translations = usePickerTranslations();\n  const localizedDigits = React.useMemo(() => getLocalizedDigits(adapter), [adapter]);\n  const {\n    format = pickerContext?.fieldFormat ?? adapter.formats.fullDate\n  } = parameters;\n  return React.useMemo(() => {\n    const sections = buildSectionsFromFormat({\n      adapter,\n      format,\n      formatDensity: 'dense',\n      isRtl,\n      shouldRespectLeadingZeros: true,\n      localeText: translations,\n      localizedDigits,\n      date: null,\n      // TODO v9: Make sure we still don't reverse in `buildSectionsFromFormat` when using `useParsedFormat`.\n      enableAccessibleFieldDOMStructure: false\n    });\n    return sections.map(section => `${section.startSeparator}${section.placeholder}${section.endSeparator}`).join('');\n  }, [adapter, isRtl, translations, localizedDigits, format]);\n};"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,uBAAuB,QAAQ,wDAAwD;AAChG,SAASC,kBAAkB,QAAQ,+CAA+C;AAClF,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,wBAAwB,QAAQ,gDAAgD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,SAAAA,CAAA,EAAqB;EAAA,IAAAC,qBAAA;EAAA,IAApBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC7C,MAAMG,aAAa,GAAGP,wBAAwB,CAAC,CAAC;EAChD,MAAMQ,OAAO,GAAGZ,gBAAgB,CAAC,CAAC;EAClC,MAAMa,KAAK,GAAGd,MAAM,CAAC,CAAC;EACtB,MAAMe,YAAY,GAAGX,qBAAqB,CAAC,CAAC;EAC5C,MAAMY,eAAe,GAAGjB,KAAK,CAACkB,OAAO,CAAC,MAAMd,kBAAkB,CAACU,OAAO,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACnF,MAAM;IACJK,MAAM,IAAAX,qBAAA,GAAGK,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,WAAW,cAAAZ,qBAAA,cAAAA,qBAAA,GAAIM,OAAO,CAACO,OAAO,CAACC;EACzD,CAAC,GAAGb,UAAU;EACd,OAAOT,KAAK,CAACkB,OAAO,CAAC,MAAM;IACzB,MAAMK,QAAQ,GAAGpB,uBAAuB,CAAC;MACvCW,OAAO;MACPK,MAAM;MACNK,aAAa,EAAE,OAAO;MACtBT,KAAK;MACLU,yBAAyB,EAAE,IAAI;MAC/BC,UAAU,EAAEV,YAAY;MACxBC,eAAe;MACfU,IAAI,EAAE,IAAI;MACV;MACAC,iCAAiC,EAAE;IACrC,CAAC,CAAC;IACF,OAAOL,QAAQ,CAACM,GAAG,CAACC,OAAO,OAAAC,MAAA,CAAOD,OAAO,CAACE,cAAc,EAAAD,MAAA,CAAGD,OAAO,CAACG,WAAW,EAAAF,MAAA,CAAGD,OAAO,CAACI,YAAY,CAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACnH,CAAC,EAAE,CAACrB,OAAO,EAAEC,KAAK,EAAEC,YAAY,EAAEC,eAAe,EAAEE,MAAM,CAAC,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}