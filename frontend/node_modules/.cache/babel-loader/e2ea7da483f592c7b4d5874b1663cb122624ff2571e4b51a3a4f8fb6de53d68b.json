{"ast":null,"code":"import * as React from 'react';\nimport { getMeridiem, convertToMeridiem } from \"../utils/time-utils.js\";\nimport { usePickerAdapter } from \"../../hooks/usePickerAdapter.js\";\nexport function useNextMonthDisabled(month, _ref) {\n  let {\n    disableFuture,\n    maxDate,\n    timezone\n  } = _ref;\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const lastEnabledMonth = adapter.startOfMonth(disableFuture && adapter.isBefore(now, maxDate) ? now : maxDate);\n    return !adapter.isAfter(lastEnabledMonth, month);\n  }, [disableFuture, maxDate, month, adapter, timezone]);\n}\nexport function usePreviousMonthDisabled(month, _ref2) {\n  let {\n    disablePast,\n    minDate,\n    timezone\n  } = _ref2;\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const firstEnabledMonth = adapter.startOfMonth(disablePast && adapter.isAfter(now, minDate) ? now : minDate);\n    return !adapter.isBefore(firstEnabledMonth, month);\n  }, [disablePast, minDate, month, adapter, timezone]);\n}\nexport function useMeridiemMode(date, ampm, onChange, selectionState) {\n  const adapter = usePickerAdapter();\n  const cleanDate = React.useMemo(() => !adapter.isValid(date) ? null : date, [adapter, date]);\n  const meridiemMode = getMeridiem(cleanDate, adapter);\n  const handleMeridiemChange = React.useCallback(mode => {\n    const timeWithMeridiem = cleanDate == null ? null : convertToMeridiem(cleanDate, mode, Boolean(ampm), adapter);\n    onChange(timeWithMeridiem, selectionState !== null && selectionState !== void 0 ? selectionState : 'partial');\n  }, [ampm, cleanDate, onChange, selectionState, adapter]);\n  return {\n    meridiemMode,\n    handleMeridiemChange\n  };\n}","map":{"version":3,"names":["React","getMeridiem","convertToMeridiem","usePickerAdapter","useNextMonthDisabled","month","_ref","disableFuture","maxDate","timezone","adapter","useMemo","now","date","undefined","lastEnabledMonth","startOfMonth","isBefore","isAfter","usePreviousMonthDisabled","_ref2","disablePast","minDate","firstEnabledMonth","useMeridiemMode","ampm","onChange","selectionState","cleanDate","isValid","meridiemMode","handleMeridiemChange","useCallback","mode","timeWithMeridiem","Boolean"],"sources":["/Users/macmini/Documents/Sistema_Consultorio/frontend/node_modules/@mui/x-date-pickers/esm/internals/hooks/date-helpers-hooks.js"],"sourcesContent":["import * as React from 'react';\nimport { getMeridiem, convertToMeridiem } from \"../utils/time-utils.js\";\nimport { usePickerAdapter } from \"../../hooks/usePickerAdapter.js\";\nexport function useNextMonthDisabled(month, {\n  disableFuture,\n  maxDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const lastEnabledMonth = adapter.startOfMonth(disableFuture && adapter.isBefore(now, maxDate) ? now : maxDate);\n    return !adapter.isAfter(lastEnabledMonth, month);\n  }, [disableFuture, maxDate, month, adapter, timezone]);\n}\nexport function usePreviousMonthDisabled(month, {\n  disablePast,\n  minDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const firstEnabledMonth = adapter.startOfMonth(disablePast && adapter.isAfter(now, minDate) ? now : minDate);\n    return !adapter.isBefore(firstEnabledMonth, month);\n  }, [disablePast, minDate, month, adapter, timezone]);\n}\nexport function useMeridiemMode(date, ampm, onChange, selectionState) {\n  const adapter = usePickerAdapter();\n  const cleanDate = React.useMemo(() => !adapter.isValid(date) ? null : date, [adapter, date]);\n  const meridiemMode = getMeridiem(cleanDate, adapter);\n  const handleMeridiemChange = React.useCallback(mode => {\n    const timeWithMeridiem = cleanDate == null ? null : convertToMeridiem(cleanDate, mode, Boolean(ampm), adapter);\n    onChange(timeWithMeridiem, selectionState ?? 'partial');\n  }, [ampm, cleanDate, onChange, selectionState, adapter]);\n  return {\n    meridiemMode,\n    handleMeridiemChange\n  };\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,EAAEC,iBAAiB,QAAQ,wBAAwB;AACvE,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,OAAO,SAASC,oBAAoBA,CAACC,KAAK,EAAAC,IAAA,EAIvC;EAAA,IAJyC;IAC1CC,aAAa;IACbC,OAAO;IACPC;EACF,CAAC,GAAAH,IAAA;EACC,MAAMI,OAAO,GAAGP,gBAAgB,CAAC,CAAC;EAClC,OAAOH,KAAK,CAACW,OAAO,CAAC,MAAM;IACzB,MAAMC,GAAG,GAAGF,OAAO,CAACG,IAAI,CAACC,SAAS,EAAEL,QAAQ,CAAC;IAC7C,MAAMM,gBAAgB,GAAGL,OAAO,CAACM,YAAY,CAACT,aAAa,IAAIG,OAAO,CAACO,QAAQ,CAACL,GAAG,EAAEJ,OAAO,CAAC,GAAGI,GAAG,GAAGJ,OAAO,CAAC;IAC9G,OAAO,CAACE,OAAO,CAACQ,OAAO,CAACH,gBAAgB,EAAEV,KAAK,CAAC;EAClD,CAAC,EAAE,CAACE,aAAa,EAAEC,OAAO,EAAEH,KAAK,EAAEK,OAAO,EAAED,QAAQ,CAAC,CAAC;AACxD;AACA,OAAO,SAASU,wBAAwBA,CAACd,KAAK,EAAAe,KAAA,EAI3C;EAAA,IAJ6C;IAC9CC,WAAW;IACXC,OAAO;IACPb;EACF,CAAC,GAAAW,KAAA;EACC,MAAMV,OAAO,GAAGP,gBAAgB,CAAC,CAAC;EAClC,OAAOH,KAAK,CAACW,OAAO,CAAC,MAAM;IACzB,MAAMC,GAAG,GAAGF,OAAO,CAACG,IAAI,CAACC,SAAS,EAAEL,QAAQ,CAAC;IAC7C,MAAMc,iBAAiB,GAAGb,OAAO,CAACM,YAAY,CAACK,WAAW,IAAIX,OAAO,CAACQ,OAAO,CAACN,GAAG,EAAEU,OAAO,CAAC,GAAGV,GAAG,GAAGU,OAAO,CAAC;IAC5G,OAAO,CAACZ,OAAO,CAACO,QAAQ,CAACM,iBAAiB,EAAElB,KAAK,CAAC;EACpD,CAAC,EAAE,CAACgB,WAAW,EAAEC,OAAO,EAAEjB,KAAK,EAAEK,OAAO,EAAED,QAAQ,CAAC,CAAC;AACtD;AACA,OAAO,SAASe,eAAeA,CAACX,IAAI,EAAEY,IAAI,EAAEC,QAAQ,EAAEC,cAAc,EAAE;EACpE,MAAMjB,OAAO,GAAGP,gBAAgB,CAAC,CAAC;EAClC,MAAMyB,SAAS,GAAG5B,KAAK,CAACW,OAAO,CAAC,MAAM,CAACD,OAAO,CAACmB,OAAO,CAAChB,IAAI,CAAC,GAAG,IAAI,GAAGA,IAAI,EAAE,CAACH,OAAO,EAAEG,IAAI,CAAC,CAAC;EAC5F,MAAMiB,YAAY,GAAG7B,WAAW,CAAC2B,SAAS,EAAElB,OAAO,CAAC;EACpD,MAAMqB,oBAAoB,GAAG/B,KAAK,CAACgC,WAAW,CAACC,IAAI,IAAI;IACrD,MAAMC,gBAAgB,GAAGN,SAAS,IAAI,IAAI,GAAG,IAAI,GAAG1B,iBAAiB,CAAC0B,SAAS,EAAEK,IAAI,EAAEE,OAAO,CAACV,IAAI,CAAC,EAAEf,OAAO,CAAC;IAC9GgB,QAAQ,CAACQ,gBAAgB,EAAEP,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAI,SAAS,CAAC;EACzD,CAAC,EAAE,CAACF,IAAI,EAAEG,SAAS,EAAEF,QAAQ,EAAEC,cAAc,EAAEjB,OAAO,CAAC,CAAC;EACxD,OAAO;IACLoB,YAAY;IACZC;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}